// Mocks generated by Mockito 5.4.2 from annotations
// in notes/test/domain/test_repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notes/core/failure/failure.dart' as _i5;
import 'package:notes/domain/entities/note.dart' as _i6;
import 'package:notes/domain/entities/user.dart' as _i10;
import 'package:notes/domain/repositories/note_repository.dart' as _i3;
import 'package:notes/domain/repositories/user_repository.dart' as _i9;
import 'package:notes/domain/usecase/note_usecase/create_usecase.dart' as _i7;
import 'package:notes/domain/usecase/note_usecase/update_usecase.dart' as _i8;
import 'package:notes/domain/usecase/user_usecase/create_usecase.dart' as _i11;
import 'package:notes/domain/usecase/user_usecase/update_usecase.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i3.NoteRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Note>> readNote(
          {required String? noteId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readNote,
          [],
          {#noteId: noteId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>.value(
            _FakeEither_0<_i5.Failure, _i6.Note>(
          this,
          Invocation.method(
            #readNote,
            [],
            {#noteId: noteId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>.value(
                _FakeEither_0<_i5.Failure, _i6.Note>(
          this,
          Invocation.method(
            #readNote,
            [],
            {#noteId: noteId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> createNote(
          {required _i7.CreateParamsNote? noteParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [],
          {#noteParams: noteParams},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #createNote,
            [],
            {#noteParams: noteParams},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #createNote,
            [],
            {#noteParams: noteParams},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateNote(
          {required _i8.UpdateParamsNote? updateParamsNote}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [],
          {#updateParamsNote: updateParamsNote},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateNote,
            [],
            {#updateParamsNote: updateParamsNote},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateNote,
            [],
            {#updateParamsNote: updateParamsNote},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteNote(
          {required String? noteId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [],
          {#noteId: noteId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteNote,
            [],
            {#noteId: noteId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteNote,
            [],
            {#noteId: noteId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.User>> getUserById(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [],
          {#userId: userId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i10.User>>.value(
            _FakeEither_0<_i5.Failure, _i10.User>(
          this,
          Invocation.method(
            #getUserById,
            [],
            {#userId: userId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i10.User>>.value(
                _FakeEither_0<_i5.Failure, _i10.User>(
          this,
          Invocation.method(
            #getUserById,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i10.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> createUser(
          {required _i11.CreateParamsUser? createParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {#createParams: createParams},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #createUser,
            [],
            {#createParams: createParams},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #createUser,
            [],
            {#createParams: createParams},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateuser(
          {required _i12.UpdateParamsUser? updateParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateuser,
          [],
          {#updateParams: updateParams},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateuser,
            [],
            {#updateParams: updateParams},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateuser,
            [],
            {#updateParams: updateParams},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
